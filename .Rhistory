print("Hello", quote=FALSE)
print("Hello", quote=TRUE)
print("Hello")
cls
mystr <- "Hello World"
mystr
source("~/SuryaMain/RProjects/myproject/script1.R")
Rscript script1.R
myint <- 5l
myint <- 5L
class(myint)
mynumeric <- 6.0
class(mynumeric)
class(mystr)
myraw = charToRaw("Hello")
class(myraw)
mystr
sin
pi
sin(pi)
sin(pi/2)
sin(2*pi)
round(pi)
round(sin(pi))
round(sin(2*pi))
class(c("hello", "abcs", "werwer"))
list(c("A", "B", "C"))
mylist <- list(c("A", "B", "C"))
testnum = 6
rm(testnum)
class(mylist)
mymat <- matrix(c("A", "B", "C"))
mymat
mymat <- matrix(c("A", "B", "C"), byrow = TRUE)
mymat
mymat <- matrix(c("A", "B", "C"), byrow = FALSE)
mymat
mymat <- matrix(c("A", "B", "C"), nrow = 1, ncol = 3, byrow = TRUE)
mymat
mymat <- matrix(c("A", "B", "C"), nrow = 1, ncol = 3, byrow = FALSE)
mymat
mymat <- matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = TRUE)
mymat
mymat <- matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, bycol = TRUE)
mymat <- matrix( c('a','a','b','c','b','a'), nrow = 2, ncol = 3, byrow = FALSE)
mymat
View(mymat)
View(mymat)
myvar <- "Hello"
"hello" -> myvar2
myvar1
myvar2
var1 <- c("Hello", "Hello2", "Hello3")
class(var2)
class(var1)
var1List <- list(var1)
var1List
class(var1LIstr)
class(var1List)
var1
var1 <- c("Hello", 2.5, 4L)
var1Arr <- array(var1, dim=(3,1))
var1Arr <- array(var1,dim=(3,1))
a <- array(c('green','yellow'),dim = c(3,3,2))
var1Arr <- array(var1, dim=c(3,1))
var1Arr
attributes(var1Arr)
length(var1Arr)
typof(var1Arr)
typeof(var1Arr)
is.numeric(var1)
is.character(var1)
typeof(var1)
a
dim(a)
is.atomic(c("Hello", "Welcome"))
is.atomic(c("Hello", 4.3))
is.atomic(list(c("Hello", 4.3))
var``
var1
list(c("A", "B"))
mylist <- list(c("A", "B"))
typeof(mylist)
dim(mylist)
as.array(mylist)
mylist <- as.array(mylist)
class(mylist)
dim(mulist)
dim(mylist)
num <- 8.2
is.numeric(num)
is.numeric(8.2L)
int <- as.integer(8.3)
int
type(int)
typeof(int)
cars
print(c(class(cars), typeof(cars)))
ls
ls()
rm()
rm(a)
rm(int)
var.1 <- "Hello"
hidden
M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
M
typeof(m)
typeof(<)
typeof(M)
M = as.numeric(M)
M
class(M)
M
M = matrix( c(2,6,5,1,10,4), nrow = 2,ncol = 3,byrow = TRUE)
t(M)
M %*% M
N = matrix(c(1,2,3,4), nrow = 2, ncol = 2, byrow = TRUE)
N
dim(N)
N %*% N
N * N
var1 <- "MyChar"
print(as.numeric(var1))
var1 <- "1"
print(as.numeric(var1))
var2 <- 345
print(as.character(var2))
print(is.numeric(var1))
print(is.double(var2))
print(N)
print(N)
mystr <- "Hello world"
print(mystr, quote=FALSE)
print("Hello2")
print("Hello3")
print("Hello4")
#  Operators
N <- matrix(c(1,2,3,4), nrow=2, ncol=2, byrow=TRUE)
print(N)
N <- matrix(c(1,2,3,4), nrow=2, ncol=2, byrow=TRUE)
print(N)
N <- matrix(c(1,2,3,4), nrow=2, ncol=2, bycol=TRUE)
print(N)
N <- matrix(c(1,2,3,4), nrow=2, ncol=2, byrow=FALSE)
print(N)
install.packages("faraway")
install.packages("dplyr")
ls()
ls()
rm(list=ls())
N <- matrix(c(1,2,3,4), nrow=2, ncol=2, byrow=FALSE)
print(N)
ls()
N
N.row()
y = 5
y <- 5
class(y)
typof(y)
typeof(y)
data(package='faraway')
data(coagulation, package='faraway')
ls()
coagulation
typeof(coagulation)
coagulation
plot(coag~diet, data=coagulation)
summary(coagulation)
# We are commenting
# c() for entering dataset in R
data <- {35, 8, 10, 23, 42}
data = {35, 8, 10, 23, 42}
data.1 = c(25, 8, 10, 23, 42)
data
data.1
data.1 = c(25,   8,   10,    23,    42)
data.1
summary(data.1)
mean(data.1)
sum(data.1)
sum(data.1)/5
sd(data.1)
small.size.dataset=c(91,49,76,112,97,42,70, 100, 8, 112, 95, 90, 78, 62, 56, 94, 65, 58, 109, 70, 109, 91, 71, 76, 68, 62, 134, 57, 83, 66)
small.size.dataset
hist(small.size.dataset)
hist(small.size.dataset, xlab=)
hist(small.size.dataset, xlab='My data points')
hist(small.size.dataset, xlab='My data points', main='Histogram of my data')
hist(small.size.dataset, xlab='My data points', main='Histogram of my data', bins=3)
hist(small.size.dataset, xlab='My data points', main='Histogram of my data', freq = F)
hist(small.size.dataset, xlab='My data points', main='Histogram of my data', freq=F)
hist(small.size.dataset, xlab='My data points', main='Histogram of my data', freq=F, col='green')
lines(density(small.size.dataset))
lines(density(small.size.dataset), col='red')
lines(density(small.size.dataset), col='red', lwd=5)
hist(small.size.dataset, xlab='My data points', main='Histogram of my data', freq=F, col='green', breaks=10)
hist(small.size.dataset, xlab='My data points', main='Histogram of my data', freq=F, col='green', breaks=4)
hist(small.size.dataset, xlab='My data points', main='Histogram of my data', freq=F, col='green', breaks=5)
hist(small.size.dataset, xlab='My data points', main='Histogram of my data', freq=F, col='green', breaks=6)
set.seed=2016
set.seed(2016)
Test_1_scores = round(rnorm(50,78,10))
len(Test_1_scores)
Test_1_scores
Test_2_scores = round(rnorm(50,70,14))
Test_2_scores
plot(Test_2_scores~Test_1_scores)
plot(Test_2_scores~Test_1_scores, main='Test scores for two exams')
plot(Test_2_scores~Test_1_scores, main='Test scores for two exams', xlab='test 1 scores', ylab='test 2 scores')
plot(Test_2_scores~Test_1_scores, main='Test scores for two exams', xlab='test 1 scores', ylab='test 2 scores', col='blue')
co2
co2.1
help(co2)
class(co2)
plot(co2, main='Atmospheric CO2 Concentration')
co2.values = as.numeric(co2)
co2.times = as.numeric(time(co2))
SSxx = sum((co2.times - mean(co2.times))*(co2.times - mean(co2.times)))
SSxy = sum((co2.values - mean(co2.values))*(co2.times - mean(co2.times)))
(slope = SSxy/SSxx)
(intercept = mean(co2.values)-slope*mean(co2.times))
co2.linear.model = lm(co2~time(co2))
co2.linear.model
plot(co2, main='Atm. CO2 Concentration with Fitted Line')
abline(co2.linear.model)
abline(1,2)
abline(v = 1980)
plot(co2, main='Atm. CO2 Concentration with Fitted Line')
abline(co2.linear.model)
class(co2.linear.model)
typeof(co2.linear.model)
co2.linear.model
co2.residuals = resid(co2.linear.model)
co2.residuals
plot(co2.residuals)
par(mfrow=c(1,3))
( c02.residuals = resid( co2.linear.model ) )
hist(co2.residuals, main= "Histogram of CO2 Residuals")
qqnorm(c02.residuals, main= "Normal Probability Plot")
qqline(c02.residuals)
plot(c02.residuals ~ time(co2), main="Residuals on Time")
x<-rnorm(1000)
class(x)
x<-rnorm(10000)
qqnorm(x)
qqline(x,col='red')
plot.new()
qqnorm(x)
qqline(x,col='red')
plot(co2.residuals~time(co2), xlim=c(1960,1963), main='Zoomed in Residuals on Time')
sleep
plot(extra~group, data=sleep, main='Extra Sleep in Gosset Data by Group')
plot(group~extra, data=sleep, main='Extra Sleep in Gosset Data by Group')
plot(extra~group, data=sleep, main='Extra Sleep in Gosset Data by Group')
$x
attach(sleep)
sleep
class(sleep)
extra.1 = extra[group==1]
extra.2 = extra[group==2]
extra.1
extra.2
plot(extra.1~extra.2, main='Arbitrary Title')
boxplot(extra.1)
boxplot(extra.2)
t.test(extra.1, extra.2, paired=T, alternative='two.sided')
diffs = extra.1 - extra.2
qqnorm(diffs, main='Normal PP')
qqline(diffs)
plot(extra.2~extra.1, xlab='extra sleep with drug1', ylab='extra sleep with drug2', main=)
plot(extra.2~extra.1, xlab='extra sleep with drug1', ylab='extra sleep with drug2', main='Extra Sleep Drug 2 against Drug 1')
sleep.lin.model = lm(extra.2~extra.1)
sleep.lin.model = lm(extra.2~extra.1)
abline(sleep.lin.model)
plot.new()
sleep.lin.model = lm(extra.2~extra.1)
abline(sleep.lin.model)
extra.1
extra.2
abline(sleep.lin.model.lm)
plot.new()
sleep.lin.model = lm(extra.2~extra.1)
abline(sleep.lin.model.lm)
abline(sleep.lin.model)
sleep.linear.model = lm(extra.2 ~ extra.1 )
abline(sleep.linear.model)
sleep.linear.model = lm(extra.2 ~ extra.1 )
abline(sleep.linear.model)
plot(abline(sleep.lin.model))
qqnorm(diffs, main='NPP')
qqline(diffs)
plot(extra.2~extra.1, xlab='extra sleep with drug 1', ylab='extra sleep with drug 2' ,
main='Extra Sleep Drug 2 against Extra Sleep Drug 1')
sleep.linear.model = lm(extra.2 ~ extra.1 )
abline(sleep.linear.model)
qqnorm(resid(sleep.linear.model))
plot(extra.2~extra.1, xlab='extra sleep with drug 1', ylab='extra sleep with drug 2' ,
main='Extra Sleep Drug 2 against Extra Sleep Drug 1')
sleep.linear.model = lm(extra.2 ~ extra.1 )
abline(sleep.linear.model)
qqnorm(resid(sleep.linear.model))
qqline(reside(sleep.linear.model))
qqline(resid(sleep.linear.model))
summar(sleep.linear.model)
summary(sleep.linear.model)
residuals = reside(sleep.linear.model)
residuals = resid(sleep.linear.model)
residuals[3]
